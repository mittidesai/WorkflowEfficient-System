package wfes;

import Conversion.TableData;
import dal.ConnectionDAL;
import dal.DepartmentDAL;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import to.Department;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 01
 */
public class DepartmentView extends javax.swing.JPanel {

    /**
     * Creates new form DepartmentView
     */
    List<Department> departmentListv = null;
    
     Vector colVector = new Vector();

    public DepartmentView() {
        initComponents();
        //td.fillTableData(departmentViewTB, new ConnectionDAL().getConnection(), "department");

        refreshtb();
        
        departmentViewTB.getSelectionModel().addListSelectionListener(l1);

        departmentViewTB.getSelectionModel().addListSelectionListener(l1);
        departmentViewTB.addKeyListener(kl);
        searchTextField.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        departmentViewTB = new javax.swing.JTable();

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(86, 86, 87));
        jLabel1.setText("Department View");

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(86, 86, 87));
        jLabel2.setText("Search:");

        departmentViewTB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        departmentViewTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(departmentViewTB);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTextField)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(203, 203, 203))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable departmentViewTB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
    
    void refreshtb(){
         departmentListv = new DepartmentDAL().getDepartmentDetails();
        colVector = new DepartmentDAL().getDepartmentColumnDetails();
        
     



        Vector rowVector = new Vector();
        for (Department departmentTemp : departmentListv) {
            Vector temp = new Vector();
            temp.add(departmentTemp.getDeptId());
            temp.add(departmentTemp.getDeptName());
            temp.add(departmentTemp.getDeptDesc());
            rowVector.add(temp);
        }
        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
       
        departmentViewTB.setModel(model);
//        departmentViewTB.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//         departmentViewTB.getColumnModel().getColumn(3).setWidth(1500);
//       
//          System.out.println("dfgh"+departmentViewTB.getColumnModel().getColumn(3).getWidth());
         departmentViewTB.setAutoCreateRowSorter(true);

        
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(7));
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(6));
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(5));
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(4));
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(3));
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(0));
    }
    
    
    ListSelectionListener l1 = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (departmentViewTB.getSelectedRow() > -1) {
                int k = departmentViewTB.convertRowIndexToModel(departmentViewTB.getSelectedRow());
                //String mail = departmentModifyTB.getModel().getValueAt(i, 3).toString();
                //jTextField1.setText(mail);
            }

        }
    };
    KeyListener kl = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
           
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {

                String data = searchTextField.getText();
                if (data.length() > 0) {
                    data = data.substring(0, data.length() - 1);
                    searchTextField.setText(data);
                }
            }
            else{  
                if((e.getKeyCode()>= 'a' && e.getKeyCode()<='z') ||(e.getKeyCode()>= 'A' && e.getKeyCode()<='Z') || (e.getKeyCode()>= '0' && e.getKeyCode()<='9') || e.getKeyCode()==' '){
                searchTextField.setText(searchTextField.getText() + e.getKeyChar());
                searchTextField.setText(searchTextField.getText().toLowerCase());
                }
                else{
                    //System.out.println("hello");
                }
            }
            searchDepartmentListV();
        
        }

        @Override
        public void keyReleased(KeyEvent ke) {
        }
    };

    public void searchDepartmentListV() {
        String data = searchTextField.getText();
        List<Department> departmentListTemp = new ArrayList<Department>();
        for (Department departmentTemp : departmentListv) {
           if (departmentTemp.getDeptName().toLowerCase().contains(data) || departmentTemp.getDeptDesc().toLowerCase().contains(data)){
                departmentListTemp.add(departmentTemp);
            }
        }
        Vector rowVector = new Vector();
        for (Department departmentTemp : departmentListTemp) {
            Vector temp = new Vector();
            temp.add(departmentTemp.getDeptId());
            temp.add(departmentTemp.getDeptName());
            temp.add(departmentTemp.getDeptDesc());
            rowVector.add(temp);
        }
        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        departmentViewTB.setModel(model);

        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(7));
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(6));
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(5));
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(4));
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(3));
        departmentViewTB.removeColumn(departmentViewTB.getColumnModel().getColumn(0));

    }
}
