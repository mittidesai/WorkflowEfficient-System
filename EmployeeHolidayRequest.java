/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wfes;

import Conversion.UtilToSql;
import dal.ConnectionDAL;
import dal.EmpHCountDAL;
import dal.EmpHolDAL;
import dal.EmployeeDAL;
import dal.PlTlDal;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.sql.Connection;
import java.util.List;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;
import to.EmpHCount;
import to.EmpHol;
import to.Employee;
import to.PlTl;

/**
 *
 * @author Shivani
 */
public class EmployeeHolidayRequest extends javax.swing.JPanel {

    List<EmpHCount> emphcountList = null;
    Connection connection = new ConnectionDAL().getConnection();
    EmpHol emphol = null;
    EmpHCount emphcount = null;
    //  String NOOFDAYS =null;
    /**
     * Creates new form EmployeeHolidayRequest
     */
    Employee emp2 = new Employee();

    public EmployeeHolidayRequest() {
        initComponents();
        clear();

      //  PlainDocument doc = (PlainDocument) NoOfDaysTF.getDocument();
        //doc.setDocumentFilter(new MyIntFilter());
        NoOfDaysTF.addFocusListener(f1);
        //  enddateDC.addFocusListener(f1);

        Employee emp2 = new Employee();
        EmpHCount emp1 = new EmpHCountDAL().getEmpHCountDetails(1, 0).get(0);

        sendreqSB.addActionListener(al);
  

        this.emphcount = emp1;


        casualleavebalLB.setText(Double.toString(this.emphcount.getClCount()));
        lossofpaybalLB.setText(Double.toString(this.emphcount.getLOPCount()));
        maternityleavebalLB.setText(Double.toString(this.emphcount.getMLCount()));
        compensatoryleavebalLB.setText(Double.toString(this.emphcount.getCOCount()));
        sickleavebalLB.setText(Double.toString(this.emphcount.getSlCount()));
        earnedleavebalLB.setText(Double.toString(this.emphcount.getSlCount()));




    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        casualleaveRB = new javax.swing.JRadioButton();
        sickleaveRB = new javax.swing.JRadioButton();
        lossofpayRB = new javax.swing.JRadioButton();
        maternityleaveRB = new javax.swing.JRadioButton();
        earnedleaveRB = new javax.swing.JRadioButton();
        compensatoryoffRB = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lossofpaybalLB = new javax.swing.JLabel();
        casualleavebalLB = new javax.swing.JLabel();
        maternityleavebalLB = new javax.swing.JLabel();
        earnedleavebalLB = new javax.swing.JLabel();
        compensatoryleavebalLB = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        detailedreasonTA = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        managernameCB = new javax.swing.JComboBox();
        sendreqSB = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        startdateDC = new com.toedter.calendar.JDateChooser();
        jLabel20 = new javax.swing.JLabel();
        enddateDC = new com.toedter.calendar.JDateChooser();
        startdateVAL = new javax.swing.JLabel();
        enddateVAL = new javax.swing.JLabel();
        noofdaysVAL = new javax.swing.JLabel();
        detailedreasonVAL = new javax.swing.JLabel();
        managercbVAL = new javax.swing.JLabel();
        typeofleaveVAL = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        fullRB = new javax.swing.JRadioButton();
        halfRB = new javax.swing.JRadioButton();
        sickleavebalLB = new javax.swing.JLabel();
        TypeVAL = new javax.swing.JLabel();
        start_dateVAL = new javax.swing.JLabel();
        end_dateVAL = new javax.swing.JLabel();
        reasonVAL = new javax.swing.JLabel();
        managerVAL = new javax.swing.JLabel();
        fullhalfVAL = new javax.swing.JLabel();
        NoOfDaysTF = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(1388, 473));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(0));

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(86, 86, 87));
        jLabel1.setText("Holiday Request");
        jLabel1.setMaximumSize(new java.awt.Dimension(239, 27));
        jLabel1.setMinimumSize(new java.awt.Dimension(239, 27));
        jLabel1.setPreferredSize(new java.awt.Dimension(239, 27));

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jLabel2.setText("Select The Type Of Holiday :");

        buttonGroup1.add(casualleaveRB);
        casualleaveRB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        casualleaveRB.setText("    Casual Leave");

        buttonGroup1.add(sickleaveRB);
        sickleaveRB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        sickleaveRB.setText("    Sick Leave");

        buttonGroup1.add(lossofpayRB);
        lossofpayRB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        lossofpayRB.setText("    Loss Of Pay");

        buttonGroup1.add(maternityleaveRB);
        maternityleaveRB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        maternityleaveRB.setText("    Maternity Leave");

        buttonGroup1.add(earnedleaveRB);
        earnedleaveRB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        earnedleaveRB.setText("    Earned Leave");

        buttonGroup1.add(compensatoryoffRB);
        compensatoryoffRB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        compensatoryoffRB.setText("    Compensatory Off");

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jLabel3.setText("Your Leave Balance(Holiday's remaining) :");

        jLabel4.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jLabel4.setText("Casual Leave :");

        jLabel5.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jLabel5.setText("Loss Of Pay :");

        jLabel6.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jLabel6.setText("Sick Leave :");

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jLabel7.setText("Maternity Leave :");

        jLabel8.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jLabel8.setText("Earned Leave :");

        jLabel9.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jLabel9.setText("Compensatory Leave :");

        lossofpaybalLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        lossofpaybalLB.setText("jLabel11");

        casualleavebalLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        casualleavebalLB.setText("jLabel12");

        maternityleavebalLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        maternityleavebalLB.setText("jLabel13");

        earnedleavebalLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        earnedleavebalLB.setText("jLabel14");

        compensatoryleavebalLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        compensatoryleavebalLB.setText("jLabel15");

        jLabel16.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jLabel16.setText("No Of Days Required :");

        jLabel17.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jLabel17.setText("Detailed Reason :");

        detailedreasonTA.setColumns(20);
        detailedreasonTA.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        detailedreasonTA.setRows(5);
        jScrollPane1.setViewportView(detailedreasonTA);

        jLabel18.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jLabel18.setText("Select your manager :");

        managernameCB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        managernameCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        sendreqSB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        sendreqSB.setText("send your request");

        jLabel19.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jLabel19.setText("Select The Starting Date :");

        jLabel20.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jLabel20.setText("Select The Ending Date :");

        jLabel10.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jLabel10.setText("full/half :");

        buttonGroup2.add(fullRB);
        fullRB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        fullRB.setText("full");

        buttonGroup2.add(halfRB);
        halfRB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        halfRB.setText("half");

        sickleavebalLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        sickleavebalLB.setText("jLabel12");

        TypeVAL.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        TypeVAL.setForeground(new java.awt.Color(255, 0, 0));
        TypeVAL.setText("jLabel12");

        start_dateVAL.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        start_dateVAL.setForeground(new java.awt.Color(255, 0, 0));
        start_dateVAL.setText("jLabel11");

        end_dateVAL.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        end_dateVAL.setForeground(new java.awt.Color(255, 0, 0));
        end_dateVAL.setText("jLabel11");

        reasonVAL.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        reasonVAL.setForeground(new java.awt.Color(255, 0, 0));
        reasonVAL.setText("jLabel11");

        managerVAL.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        managerVAL.setForeground(new java.awt.Color(255, 0, 0));
        managerVAL.setText("jLabel11");

        fullhalfVAL.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        fullhalfVAL.setForeground(new java.awt.Color(255, 51, 51));
        fullhalfVAL.setText("jLabel11");

        NoOfDaysTF.setText("jTextField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(252, 252, 252)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(casualleaveRB)
                                    .addComponent(lossofpayRB))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(maternityleaveRB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(compensatoryoffRB))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(sickleaveRB)
                                        .addGap(18, 18, 18)
                                        .addComponent(earnedleaveRB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TypeVAL, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lossofpaybalLB))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(casualleavebalLB)))
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(sickleavebalLB, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(maternityleavebalLB)))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(earnedleavebalLB)
                                    .addComponent(compensatoryleavebalLB)))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(fullRB)
                                                .addGap(18, 18, 18)
                                                .addComponent(halfRB)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(fullhalfVAL))
                                            .addComponent(enddateDC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(startdateDC, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
                                        .addGap(85, 85, 85)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(start_dateVAL, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(end_dateVAL, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addComponent(NoOfDaysTF, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel16))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(470, 470, 470)
                                .addComponent(typeofleaveVAL))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(managernameCB, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(enddateVAL)
                                    .addComponent(startdateVAL)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(84, 84, 84)
                                        .addComponent(reasonVAL))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(153, 153, 153)
                                        .addComponent(sendreqSB, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(detailedreasonVAL)
                                                .addGap(41, 41, 41)
                                                .addComponent(managercbVAL))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(managerVAL)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(noofdaysVAL)))
                                        .addGap(113, 113, 113))))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(casualleaveRB)
                    .addComponent(sickleaveRB)
                    .addComponent(earnedleaveRB)
                    .addComponent(TypeVAL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typeofleaveVAL)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lossofpayRB)
                        .addComponent(maternityleaveRB)
                        .addComponent(compensatoryoffRB)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(earnedleavebalLB)
                    .addComponent(jLabel8)
                    .addComponent(sickleavebalLB)
                    .addComponent(casualleavebalLB))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(compensatoryleavebalLB)
                    .addComponent(lossofpaybalLB)
                    .addComponent(maternityleavebalLB))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(fullRB)
                    .addComponent(halfRB)
                    .addComponent(fullhalfVAL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(startdateDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel19))
                    .addComponent(start_dateVAL))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(enddateDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(end_dateVAL)))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(NoOfDaysTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addComponent(startdateVAL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(52, 52, 52)
                                .addComponent(enddateVAL))
                            .addComponent(reasonVAL))
                        .addGap(27, 27, 27)
                        .addComponent(noofdaysVAL)
                        .addGap(34, 34, 34)
                        .addComponent(detailedreasonVAL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(managercbVAL))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(sendreqSB))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(managernameCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(managerVAL))))
                        .addGap(26, 26, 26))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 813, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(565, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NoOfDaysTF;
    private javax.swing.JLabel TypeVAL;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton casualleaveRB;
    private javax.swing.JLabel casualleavebalLB;
    private javax.swing.JLabel compensatoryleavebalLB;
    private javax.swing.JRadioButton compensatoryoffRB;
    private javax.swing.JTextArea detailedreasonTA;
    private javax.swing.JLabel detailedreasonVAL;
    private javax.swing.JRadioButton earnedleaveRB;
    private javax.swing.JLabel earnedleavebalLB;
    private javax.swing.JLabel end_dateVAL;
    private com.toedter.calendar.JDateChooser enddateDC;
    private javax.swing.JLabel enddateVAL;
    private javax.swing.JRadioButton fullRB;
    private javax.swing.JLabel fullhalfVAL;
    private javax.swing.JRadioButton halfRB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton lossofpayRB;
    private javax.swing.JLabel lossofpaybalLB;
    private javax.swing.JLabel managerVAL;
    private javax.swing.JLabel managercbVAL;
    private javax.swing.JComboBox managernameCB;
    private javax.swing.JRadioButton maternityleaveRB;
    private javax.swing.JLabel maternityleavebalLB;
    private javax.swing.JLabel noofdaysVAL;
    private javax.swing.JLabel reasonVAL;
    private javax.swing.JButton sendreqSB;
    private javax.swing.JRadioButton sickleaveRB;
    private javax.swing.JLabel sickleavebalLB;
    private javax.swing.JLabel start_dateVAL;
    private com.toedter.calendar.JDateChooser startdateDC;
    private javax.swing.JLabel startdateVAL;
    private javax.swing.JLabel typeofleaveVAL;
    // End of variables declaration//GEN-END:variables
    String NOOFDAYS = null;

    void fillComboDataManagerName(JComboBox jComboBox) {
        Vector vector = new Vector();
        vector.add("Please Select Your Manager");

        int empId = LogIn.loginEmployee.getEmpId();
        int[] array = new EmpHCountDAL().getDesignation();
        int designationId = array[0];
        int deptId = array[1];
        int teamId = array[2];
        Employee tlTemp = null;
        PlTl plId = null;
        
        List<Employee> employeelist = new EmployeeDAL().getEmployeeDetails();
        EmpHol employeeTempFinal = null;



        for (Employee employeeTemp : employeelist) {


            if ((Float.parseFloat(NOOFDAYS)) <= 5 || ("0.5".equals(NOOFDAYS))) {
                if (designationId == 6) {
                    if (employeeTemp.getDsgnId().getDsgnId() == 5  && employeeTemp.getDeptId().getDeptId() == deptId && employeeTemp.getTeamId().getTeamId() == teamId) {

                        vector.add(employeeTemp);
                    }
                } else if (designationId == 5) {
                    if (employeeTemp.getDsgnId().getDsgnId() == 4 ) {

                         if(new PlTlDal().getBoss3(employeeTemp.getEmpId()))
                         {
                             vector.add(employeeTemp);
                         }
                    }
                    
                } else if (designationId == 4) {
                    if (employeeTemp.getDsgnId().getDsgnId() == 3 && employeeTemp.getDeptId().getDeptId() == deptId && employeeTemp.getTeamId().getTeamId() == teamId) {
                        vector.add(employeeTemp);
                    }
                }

            } else {
//              
                if (designationId == 6) {
                 
                   
                        if (employeeTemp.getDsgnId().getDsgnId() == 5  && employeeTemp.getDeptId().getDeptId() == deptId && employeeTemp.getTeamId().getTeamId() == teamId ) {
                         Employee e2=new  PlTlDal().getBoss(employeeTemp.getEmpId());
                            vector.add(e2);
                            
                        }
                   
                } else if (designationId == 5) {
                    if (employeeTemp.getDsgnId().getDsgnId() == 4 ) {

                         if(new PlTlDal().getBoss3(employeeTemp.getEmpId()))
                         {
                             vector.add(employeeTemp);
                         }
                    }
                } else if (designationId == 4) {
                    if (employeeTemp.getDsgnId().getDsgnId() == 3 && employeeTemp.getDeptId().getDeptId() == deptId && employeeTemp.getTeamId().getTeamId() == teamId) {
                        vector.add(employeeTemp);
                    }
                }
            }

        }
        ComboBoxModel cbm = new DefaultComboBoxModel(vector);
        jComboBox.setModel(cbm);

    }
    FocusAdapter f1 = new FocusAdapter() {
        @Override
        public void focusGained(FocusEvent evt) {
        }

        @Override
        public void focusLost(FocusEvent evt) {

            if (startdateDC.getDate() != null && enddateDC.getDate() != null) {

                long temp = (enddateDC.getDate().getTime()) - (startdateDC.getDate().getTime());

                long days = 0;

                days = temp / (24 * 60 * 60 * 1000);
                days = days + 2;
                if (days < 2) {
                    JOptionPane.showMessageDialog(WorkFlowEfficient.wfes, "End Date cannot be less than start date");

                } else {


                      //noofdaysTB.setText("ewew");
                    if (days == 2 && halfRB.isSelected()) {

                       // noofdaysTB.setText("ewew2");
                    

                        System.out.println("noofdaysTB:" + NoOfDaysTF.getText());
                        //String s = ""+(days - 1.5);
                        double abc=days-1.5;
                        String s =Double.toString(abc);
                        System.out.println("Miti"+s);
                        NoOfDaysTF.setText(s);
                       // noofdaysTB.setText("hello Maulikss");
                       // noofdaysTB.setText(s);
                        NOOFDAYS = s;

                        //noofdaysTB.setText("hello");

                        fillComboDataManagerName(managernameCB);


                    }else if(days == 2){
                        String s = String.valueOf(days-1);
                        
                        NOOFDAYS = s;
                        NoOfDaysTF.setText(s);
                        fillComboDataManagerName(managernameCB);
                    }
                    else {
                        String s = String.valueOf(days);
                        NOOFDAYS = s;
                        NoOfDaysTF.setText(s);
                        fillComboDataManagerName(managernameCB);
                    }

                }

            }
        }
    };
    ActionListener al = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == sendreqSB) {
//                    new popup.popup().displayManagerHolidayRequestView();
                if (validation()) {


                    EmpHol emphol1 = new EmpHol();

                    emphol1.setReason(detailedreasonTA.getText());

                    emphol1.setStartDate(new UtilToSql().convertUtilToSql(startdateDC.getDate()));

                    emphol1.setEndDate(new UtilToSql().convertUtilToSql(enddateDC.getDate()));

                    if (casualleaveRB.isSelected()) {
                        double x = Double.parseDouble(casualleavebalLB.getText());
                        if (x > 0) {
                            emphol1.setType1(600);

                        } else {
                            JOptionPane.showConfirmDialog(WorkFlowEfficient.wfes, "You have exhausted all your holidays");
                        }


                    } else if (sickleaveRB.isSelected()) {
                        double x = Double.parseDouble(sickleavebalLB.getText());
                        if (x > 0) {
                            emphol1.setType1(500);

                        } else {
                            JOptionPane.showConfirmDialog(WorkFlowEfficient.wfes, "You have exhausted all your holidays");
                        }

                    } else if (maternityleaveRB.isSelected()) {
                        double x = Double.parseDouble(maternityleavebalLB.getText());
                        if (x > 0) {
                            emphol1.setType1(200);
                            
                        } else {
                            JOptionPane.showConfirmDialog(WorkFlowEfficient.wfes, "You have exhausted all your holidays");
                        }

                    } else if (compensatoryoffRB.isSelected()) {
                        double x = Double.parseDouble(compensatoryleavebalLB.getText());
                        if (x > 0) {
                            emphol1.setType1(100);
                            
                        } else {
                            JOptionPane.showConfirmDialog(WorkFlowEfficient.wfes, "You have exhausted all your holidays");
                        }


                    } else if (lossofpayRB.isSelected()) {
                        double x = Double.parseDouble(lossofpaybalLB.getText());
                        if (x > 0) {
                            emphol1.setType1(300);
                            
                        } else {
                            JOptionPane.showConfirmDialog(WorkFlowEfficient.wfes, "You have exhausted all your holidays");
                        }

                    } else if (earnedleaveRB.isSelected()) {
                        double x =Double.parseDouble(earnedleavebalLB.getText());
                        if (x > 0) {
                            emphol1.setType1(400);
                            
                        } else {
                            JOptionPane.showConfirmDialog(WorkFlowEfficient.wfes, "You have exhausted all your holidays");
                        }

                    }

                    if (fullRB.isSelected()) {
                        emphol1.setFullHalf(1);
                        
                    } else if (halfRB.isSelected()) {
                        emphol1.setFullHalf(2);
                        
                    }
                    //Employee selectedItem = (Employee) EmpidCB.getSelectedItem();
                    Employee temp = new Employee();
                    temp.setEmpId(LogIn.loginEmployee.getEmpId());
                    emphol1.setEmpId(temp);
                    //System.out.println("Empid added");
                    emphol1.setmangrId((Employee) managernameCB.getSelectedItem());
                    
                    emphol1.setStatus("REQUESTED");
                    new EmpHolDAL().addEmpHolDetails(emphol1);

                }
               // clear();
            }


        }
    };

    void clear() {
        startdateDC.setDate(null);
        enddateDC.setDate(null);
        detailedreasonTA.setText("");
        managernameCB.setSelectedItem(null);
        NoOfDaysTF.setText("");
        casualleaveRB.setSelected(false);
        sickleaveRB.setSelected(false);
        lossofpayRB.setSelected(false);
        compensatoryoffRB.setSelected(false);
        maternityleaveRB.setSelected(false);
        earnedleaveRB.setSelected(false);
        fullRB.setSelected(false);
        halfRB.setSelected(false);
        //noofdaysTB.setText(null);
        fullhalfVAL.setText("");
        typeofleaveVAL.setText("");
        TypeVAL.setText("");
        start_dateVAL.setText("");
        end_dateVAL.setText("");
        detailedreasonVAL.setText("");
        managercbVAL.setText("");
        managerVAL.setText("");
        reasonVAL.setText("");

        //buttonGroup1.setSelected(buttonGro, false);
        //  buttonGroup2.setSelected(, false);
        // ButtonGroup:group.setSelected(buttonGroup1.getmodel(),false);
    }

    boolean validation() {
        boolean flag = true;
        // clear();
//if (detailedreasonTA.getText().equals("")) {
//            detailedreasonVAL.setText("Please enter Address");
//            flag = false;
//        }
        if (!((fullRB.isSelected()) || (halfRB.isSelected()))) {
            fullhalfVAL.setText("Please Select Full/Half");
            
            flag = false;
        }
        if (managernameCB.getSelectedItem() == null) {
            managerVAL.setText("Please Select Your Manager");
            
            flag = false;
        }


        if (startdateDC.getDate() == null) {
            start_dateVAL.setText("Please Select The Start Date");
            
            flag = false;
        }
        if (enddateDC.getDate() == null) {
            end_dateVAL.setText("Please Select The End Date");
            
            flag = false;
        }
        if (detailedreasonTA.getText().equals("")) {
            reasonVAL.setText("Please Enter The Detailed Reason");
            
            flag = false;
        }
        if ((casualleaveRB.isSelected() == false) && (maternityleaveRB.isSelected() == false) && (compensatoryoffRB.isSelected() == false) && (lossofpayRB.isSelected() == false) && (sickleaveRB.isSelected() == false && (earnedleaveRB.isSelected() == false))) {
            TypeVAL.setText("Please Select The Type Of Leave");
         
            flag = false;
        }
        return flag;
    }
}

class MyIntFilter extends DocumentFilter {

    @Override
    public void insertString(FilterBypass fb, int offset, String string,
            AttributeSet attr) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.insert(offset, string);

        if (test(sb.toString())) {
            super.insertString(fb, offset, string, attr);
        } else {
            // warn the user and don't allow the insert
        }
    }

    private boolean test(String text) {
        try {
            Integer.parseInt(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    @Override
    public void replace(FilterBypass fb, int offset, int length, String text,
            AttributeSet attrs) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.replace(offset, offset + length, text);

        if (test(sb.toString())) {
            super.replace(fb, offset, length, text, attrs);
        } else {
            // warn the user and don't allow the insert
        }

    }

    @Override
    public void remove(FilterBypass fb, int offset, int length)
            throws BadLocationException {
        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.delete(offset, offset + length);

        if (test(sb.toString())) {
            super.remove(fb, offset, length);
        } else {
            // warn the user and don't allow the insert
        }

    }
}
