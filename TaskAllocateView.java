/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wfes;

import dal.ConnectionDAL;
import dal.PlTlDal;

import dal.TaskDeptDAL;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import to.PlTl;

import to.TaskDept;

/**
 *
 * @author hp pav 15-e015tx
 */
public class TaskAllocateView extends javax.swing.JPanel {

    /**
     * Creates new form TaskAllocateView
     */
    List<TaskDept> taskDeptList = null;
    static int selectedRow = 0;
    Connection connection = new ConnectionDAL().getConnection();
    Vector colVector = new Vector();

    public TaskAllocateView() {
        initComponents();
        
         if (LogIn.localempid.getDsgnId().getDsgnTitle().toString().equals("PROJECT MANAGER")) {
             titleLB.setText("ALLOCATION VIEW");
             UpdateBT.setVisible(false);
         }

        colVector.add("TD_ID");
        colVector.add("PROJECT");
        colVector.add("TASK");
        colVector.add("EMPLOYEE");

        refreshtb();
        
        

        AllocationModifyTB.getSelectionModel().addListSelectionListener(l1);
        AllocationModifyTB.addKeyListener(kl);
        UpdateBT.addActionListener(al);
        UpdateBT.addKeyListener(k2);


        searchTextField.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        UpdateBT = new javax.swing.JButton();
        titleLB = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        AllocationModifyTB = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        UpdateBT.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        UpdateBT.setForeground(new java.awt.Color(86, 86, 87));
        UpdateBT.setText("UPDATE");

        titleLB.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        titleLB.setForeground(new java.awt.Color(86, 86, 87));
        titleLB.setText("Allocation Modify");

        searchTextField.setEnabled(false);

        AllocationModifyTB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        AllocationModifyTB.setForeground(new java.awt.Color(86, 86, 87));
        AllocationModifyTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(AllocationModifyTB);

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(86, 86, 87));
        jLabel2.setText("Search:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(titleLB)
                                .addGap(280, 280, 280))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(UpdateBT)
                                .addGap(51, 51, 51))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLB)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateBT)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 737, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AllocationModifyTB;
    private javax.swing.JButton UpdateBT;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel titleLB;
    // End of variables declaration//GEN-END:variables

    void refreshtb() {
        taskDeptList = new TaskDeptDAL().getTaskDeptDetailsCustom();
        //colVector = new TaskDAL().getTaskColumnDetails();

        Vector rowVector = new Vector();

        if (LogIn.localempid.getDsgnId().getDsgnTitle().toString().equals("ASSISTANT MANAGER")) {


            for (TaskDept taskDeptTemp : taskDeptList) {

                if (taskDeptTemp.getAb() == 1) {
                    if (taskDeptTemp.getDeptId().getDeptId() == LogIn.localempid.getDeptId().getDeptId()) {
                        if (taskDeptTemp.getCreEmpId().getEmpId() == LogIn.localempid.getEmpId()) {

                            if (taskDeptTemp.getTdb() == 0) {
                                Vector temp = new Vector();
                                temp.add(taskDeptTemp.getTdId());



                                temp.add(taskDeptTemp.getProjId().getTitle());
                                temp.add(taskDeptTemp.getTaskId().getTitle());

                                temp.add(taskDeptTemp.getEmpId().getEmpName());


                                rowVector.add(temp);
                            }
                        }
                    }
                }
            }
        }


        if (LogIn.localempid.getDsgnId().getDsgnTitle().toString().equals("PROJECT MANAGER")) {
            int plid = 0;
            int tlid = 0;
            PlTl plTl = new PlTl();
            List<PlTl> plTlList = new PlTlDal().getPlTlDetails();
            for (PlTl plTlTemp : plTlList) {
                if (plTlTemp.getPlId().getEmpId() == LogIn.localempid.getEmpId()) {
                    tlid = plTlTemp.getTlId().getEmpId();
                }

            }


            for (TaskDept taskDeptTemp : taskDeptList) {

                if (taskDeptTemp.getAb() == 1) {
                    if (taskDeptTemp.getDeptId().getDeptId() == LogIn.localempid.getDeptId().getDeptId()) {
                        if (taskDeptTemp.getCreEmpId().getEmpId() == tlid) {

                            if (taskDeptTemp.getTdb() == 0) {
                                Vector temp = new Vector();
                                temp.add(taskDeptTemp.getTdId());



                                temp.add(taskDeptTemp.getProjId().getTitle());
                                temp.add(taskDeptTemp.getTaskId().getTitle());

                                temp.add(taskDeptTemp.getEmpId().getEmpName());


                                rowVector.add(temp);
                            }
                        }
                    }
                }
            }


        }



        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        AllocationModifyTB.setModel(model);
        AllocationModifyTB.setAutoCreateRowSorter(true);



        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(0));



    }
    ActionListener al = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == UpdateBT) {

                new popup.popup().displayTaskAllocateUpdate();
                refreshtb();
            }


        }
    };
    KeyListener k2 = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getSource() == UpdateBT) {

                new popup.popup().displayTaskAllocateUpdate();
                refreshtb();
            }
            
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    };
    ListSelectionListener l1 = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (AllocationModifyTB.getSelectedRow() > -1) {
                int row = AllocationModifyTB.convertRowIndexToModel(AllocationModifyTB.getSelectedRow());


                int col = AllocationModifyTB.convertColumnIndexToModel(AllocationModifyTB.getSelectedColumn());

                Object obj = AllocationModifyTB.getModel().getValueAt(row, 0);


                String x = obj.toString();


                selectedRow = Integer.parseInt(x);
            }

        }
    };

    public static int returnSelectedRow() {
        return selectedRow;
    }
    KeyListener kl = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {

                String data = searchTextField.getText();
                if (data.length() > 0) {
                    data = data.substring(0, data.length() - 1);
                    searchTextField.setText(data);
                }
            } else {
                if ((e.getKeyCode() >= 'a' && e.getKeyCode() <= 'z') || (e.getKeyCode() >= 'A' && e.getKeyCode() <= 'Z') || (e.getKeyCode() >= '0' && e.getKeyCode() <= '9') || e.getKeyCode() == ' ') {
                    searchTextField.setText(searchTextField.getText() + e.getKeyChar());
                    searchTextField.setText(searchTextField.getText().toLowerCase());
                } else {
                    //System.out.println("hello");
                }
            }
            searchTaskList();

        }

        @Override
        public void keyReleased(KeyEvent ke) {
        }
    };

    public void searchTaskList() {
        String data = searchTextField.getText();
        List<TaskDept> taskDeptListTemp = new ArrayList<TaskDept>();
        for (TaskDept taskDeptTemp : taskDeptList) {
            if (taskDeptTemp.getTaskId().getTitle().toLowerCase().contains(data) || taskDeptTemp.getProjId().getTitle().toLowerCase().contains(data) || taskDeptTemp.getEmpId().getEmpName().toLowerCase().contains(data)) {
                taskDeptListTemp.add(taskDeptTemp);
            }
        }
        Vector rowVector = new Vector();

        if (LogIn.localempid.getDsgnId().getDsgnTitle().toString().equals("ASSISTANT MANAGER")) {


            for (TaskDept taskDeptTemp : taskDeptListTemp) {

                if (taskDeptTemp.getAb() == 1) {
                    if (taskDeptTemp.getDeptId().getDeptId() == LogIn.localempid.getDeptId().getDeptId()) {
                        if (taskDeptTemp.getCreEmpId().getEmpId() == LogIn.localempid.getEmpId()) {

                            if (taskDeptTemp.getTdb() == 0) {
                                Vector temp = new Vector();
                                temp.add(taskDeptTemp.getTdId());



                                temp.add(taskDeptTemp.getProjId().getTitle());
                                temp.add(taskDeptTemp.getTaskId().getTitle());

                                temp.add(taskDeptTemp.getEmpId().getEmpName());


                                rowVector.add(temp);
                            }
                        }
                    }
                }
            }
        }


        if (LogIn.localempid.getDsgnId().getDsgnTitle().toString().equals("PROJECT MANAGER")) {
            int plid = 0;
            int tlid = 0;
            PlTl plTl = new PlTl();
            List<PlTl> plTlList = new PlTlDal().getPlTlDetails();
            for (PlTl plTlTemp : plTlList) {
                if (plTlTemp.getPlId().getEmpId() == LogIn.localempid.getEmpId()) {
                    tlid = plTlTemp.getTlId().getEmpId();
                }

            }


            for (TaskDept taskDeptTemp : taskDeptListTemp) {

                if (taskDeptTemp.getAb() == 1) {
                    if (taskDeptTemp.getDeptId().getDeptId() == LogIn.localempid.getDeptId().getDeptId()) {
                        if (taskDeptTemp.getCreEmpId().getEmpId() == tlid) {

                            if (taskDeptTemp.getTdb() == 0) {
                                Vector temp = new Vector();
                                temp.add(taskDeptTemp.getTdId());



                                temp.add(taskDeptTemp.getProjId().getTitle());
                                temp.add(taskDeptTemp.getTaskId().getTitle());

                                temp.add(taskDeptTemp.getEmpId().getEmpName());


                                rowVector.add(temp);
                            }
                        }
                    }
                }
            }


        }



        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        AllocationModifyTB.setModel(model);



        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(0));

    }
}
