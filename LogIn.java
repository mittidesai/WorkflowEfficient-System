/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wfes;

import Conversion.DateStoring;
import dal.AttendanceDAL;
import dal.ConnectionDAL;
import dal.EmployeeDAL;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.List;
import javax.swing.JOptionPane;
import to.Attendance;
import to.Employee;

/**
 *
 * @author 04
 */
public class LogIn extends javax.swing.JInternalFrame {

    /**
     * Creates new form LogIn
     */
    public static Employee localempid;

    public LogIn() {
        initComponents();
        clear();
        loginBT.addActionListener(al);
        loginBT.addKeyListener(kl);
    }

    public LogIn(WorkFlowEfficient cf) {
        initComponents();
        this.cf = cf;
        clear();
        loginBT.addActionListener(al);
        loginBT.addKeyListener(kl);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        usernameTF = new javax.swing.JTextField();
        usernameVal = new javax.swing.JLabel();
        passwordVal = new javax.swing.JLabel();
        loginBT = new javax.swing.JButton();
        passwordTF = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(185, 201, 207));

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(86, 86, 87));
        jLabel1.setText("      Log In");

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(86, 86, 87));
        jLabel2.setText("Username");

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(86, 86, 87));
        jLabel3.setText("Password");

        usernameTF.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N

        usernameVal.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        usernameVal.setForeground(new java.awt.Color(255, 0, 0));
        usernameVal.setText("jLabel4");

        passwordVal.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        passwordVal.setForeground(new java.awt.Color(255, 0, 0));
        passwordVal.setText("jLabel5");

        loginBT.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        loginBT.setForeground(new java.awt.Color(86, 86, 87));
        loginBT.setText("Log In");

        passwordTF.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(86, 86, 87));
        jLabel5.setText("WorkFlowEfficientSystem");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(251, 251, 251)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(195, 195, 195))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(loginBT)
                                .addGap(239, 239, 239))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameTF)
                            .addComponent(passwordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameVal, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                            .addComponent(passwordVal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(16, 16, 16)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(70, 70, 70)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameVal))
                .addGap(79, 79, 79)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(passwordVal)
                        .addComponent(passwordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49)
                .addComponent(loginBT)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(329, 329, 329)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(665, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 184, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton loginBT;
    private javax.swing.JPasswordField passwordTF;
    private javax.swing.JLabel passwordVal;
    private javax.swing.JTextField usernameTF;
    private javax.swing.JLabel usernameVal;
    // End of variables declaration//GEN-END:variables
    private WorkFlowEfficient cf = null;
    public static Employee loginEmployee;

    public void loginMethod() {
        if (validation()) {
            Connection connection = new ConnectionDAL().getConnection();
            try {
                Statement st = connection.createStatement();
                String qry1 = "select username, password, emp_id from employee where username='" + usernameTF.getText() + "' and password='" + passwordTF.getText() + "'";
                //String qry = "select username, password, dsgn_id from employee";
                ResultSet rs = st.executeQuery(qry1);
                Integer i = 10;
                Boolean flag = true;
                if (rs.next()) {
                    Statement st2 = connection.createStatement();
                    String qry2 = "select a.logout_time from attendance a, employee e where a.emp_id = e.emp_id and a.emp_id='" + rs.getInt("emp_id") + "'";
                    ResultSet rs1 = st2.executeQuery(qry2);
                    boolean flag1 = false;
                    while (rs1.next()) {

                        if (rs1.wasNull()) {
                            JOptionPane.showMessageDialog(WorkFlowEfficient.wfes, "You Are Already Logged In On Some Other System");
                            flag1 = true;
                        }
                    }
                    if (flag1 == false) {

                        cf.successfulLogin();
                        Employee employeeTempFinal = null;
                        List<Employee> employeeList = new EmployeeDAL().getEmployeeDetails();
                        Attendance attendance = new Attendance();
                        for (Employee employeeTemp : employeeList) {
                            if (employeeTemp.getUsername().toString().equals(usernameTF.getText())) {
                                employeeTempFinal = employeeTemp;
                                loginEmployee = employeeTempFinal;


                            }
                        }
                        attendance.setEmpId(employeeTempFinal);


                        int flagatt = 0;
                        List<Attendance> attendanceList = new AttendanceDAL().getAttendanceDetails();
                        for (Attendance attendanceTemp : attendanceList) {


                            Calendar c2 = Calendar.getInstance();
                            int h2, mi2, s2, da2, mo2, y2;
                            h2 = 0;
                            mi2 = 0;
                            s2 = 0;
                            da2 = c2.getTime().getDate();
                            mo2 = c2.getTime().getMonth();
                            y2 = c2.getTime().getYear();
                            java.sql.Timestamp ts2 = new java.sql.Timestamp(y2, mo2, da2, h2, mi2, s2, 0);

                            Timestamp retrieved = (Timestamp) attendanceTemp.getLoginTime();
                            retrieved.setHours(0);
                            retrieved.setMinutes(0);
                            retrieved.setSeconds(0);



                            //System.out.println("Date::::"+new UtilToSql().convertUtilToSql(attendanceTemp.getLoginTime()));
                            //attendanceTemp.getLoginTime().getDate()!=ts.getDate() && attendanceTemp.getLoginTime().getMonth()!=ts.getMonth() && attendanceTemp.getLoginTime().getYear()!=ts.getYear()
                            if (attendanceTemp.getEmpId().getEmpId() == employeeTempFinal.getEmpId()) {
                                if (ts2.toString().equals(retrieved.toString())) {
                                    flagatt = 1;

                                    break;
                                }

                            }
                        }


                        int added = 0;


                        if (flagatt == 0) {
                            attendance.setLoginTime(new DateStoring().getPresentDate());
                            added = new AttendanceDAL().addAttendanceDetails(attendance);

                        } else {
                            // JOptionPane.showMessageDialog(WorkFlowEfficient.wfes, "Date already exists");
                        }





                        if (cf.successfulLogin()) {
                            localempid = attendance.getEmpId();

                            if (LogIn.localempid.getDsgnId().getDsgnTitle().toString().equals("JUNIOR EXECUTIVE")) {
                                WorkFlowEfficient.wfes.activeIFrame.getContainerPanel1().getMultiTab1().addTabCustomTaskActivity("Task Activity", new TaskActivity());

                            }

                            System.out.println("loginemp" + localempid);
//                        List<RoleModule> RoleModuleList = new RoleModuleDal().getRoleModuleDetails();
//                        RoleModule RoleModuleTempFinal = null;
//                        for (RoleModule RoleModuleTemp : RoleModuleList) {
                            if (localempid.getDsgnId().getDsgnId() == 1) {
//                             
                                WorkFlowEfficient.wfes.getProjmenu().setVisible(false);
                                WorkFlowEfficient.wfes.getTaskmenu().setVisible(false);

                                WorkFlowEfficient.wfes.getAttachmenu().setVisible(false);
                                WorkFlowEfficient.wfes.getChartmenu().setVisible(false);
                                WorkFlowEfficient.wfes.getReqHolMenu().setVisible(false);
                                WorkFlowEfficient.wfes.getMonitorMenu().setVisible(false);
                                WorkFlowEfficient.wfes.getAssessMI().setVisible(false);
                                WorkFlowEfficient.wfes.getReportMenu().setVisible(false);

                            } else if (localempid.getDsgnId().getDsgnId() == 2) {
                                WorkFlowEfficient.wfes.getDeptAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDeptModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDsgnAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDsgnModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getEmpAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getEmpModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getProjAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getProjModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTeamAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTeamModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getAttachmenu().setVisible(false);
                                WorkFlowEfficient.wfes.getTaskmenu().setVisible(false);

                                WorkFlowEfficient.wfes.getAllocationmenu().setVisible(false);
                                WorkFlowEfficient.wfes.getStartServerMI().setVisible(false);
                                WorkFlowEfficient.wfes.getReqHolMenu().setVisible(false);
                                WorkFlowEfficient.wfes.getMonitorMenu().setVisible(false);
                                WorkFlowEfficient.wfes.getAssessMI().setVisible(false);




                            } else if (localempid.getDsgnId().getDsgnId() == 3) {
                                WorkFlowEfficient.wfes.getDeptAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDeptModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDsgnAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDsgnModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getEmpAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getEmpModifyMI().setVisible(false);

                                WorkFlowEfficient.wfes.getTeamAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTeamModifyMI().setVisible(false);

                                WorkFlowEfficient.wfes.getTaskmenu().setVisible(false);
                                WorkFlowEfficient.wfes.getReqholidayMI().setVisible(false);
                                WorkFlowEfficient.wfes.getCheckstatusMI().setVisible(false);
                                


                                WorkFlowEfficient.wfes.getStartServerMI().setVisible(false);
                                WorkFlowEfficient.wfes.getAssessMI().setVisible(false);





                            } else if (localempid.getDsgnId().getDsgnId() == 4) {

                                WorkFlowEfficient.wfes.getDeptAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDeptModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDsgnAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDsgnModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getEmpModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getEmpAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getProjAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getProjModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getProjAllocateMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTaskAllocateMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTeamAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTeamModifyMI().setVisible(false);

                                WorkFlowEfficient.wfes.getStartServerMI().setVisible(false);
                                WorkFlowEfficient.wfes.getActivityMI().setVisible(false);
                                WorkFlowEfficient.wfes.getAssessMI().setVisible(false);


                            } else if (localempid.getDsgnId().getDsgnId() == 5) {
                                WorkFlowEfficient.wfes.getDeptAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDeptModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDsgnAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDsgnModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getEmpModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getEmpAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getProjAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getProjModifyMI().setVisible(false);

                                WorkFlowEfficient.wfes.getAllocationmenu().setVisible(false);
                                WorkFlowEfficient.wfes.getTaskAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTaskModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTeamAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTeamModifyMI().setVisible(false);

                                WorkFlowEfficient.wfes.getStartServerMI().setVisible(false);
                                WorkFlowEfficient.wfes.getActivityMI().setVisible(false);

                            } else if (localempid.getDsgnId().getDsgnId() == 6) {

                                WorkFlowEfficient.wfes.getChartmenu().setVisible(false);
                                WorkFlowEfficient.wfes.getDeptAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDeptModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDsgnAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getDsgnModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getEmpAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getEmpModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getProjAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getProjModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getAllocationmenu().setVisible(false);
                                WorkFlowEfficient.wfes.getTaskAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTaskModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTaskallocationmenu().setVisible(false);
                                WorkFlowEfficient.wfes.getTeamAddMI().setVisible(false);
                                WorkFlowEfficient.wfes.getTeamModifyMI().setVisible(false);
                                WorkFlowEfficient.wfes.getStartServerMI().setVisible(false);


                                WorkFlowEfficient.wfes.getMonitorMenu().setVisible(false);
                                WorkFlowEfficient.wfes.getCheckRequestsMI().setVisible(false);
                                WorkFlowEfficient.wfes.getAssessMI().setVisible(false);
                                WorkFlowEfficient.wfes.getReportMenu().setVisible(false);


                            }

                            JOptionPane.showMessageDialog(null, "Attendance Added Successfully");
                        }
                        if (WorkFlowEfficient.iFrame1 != null) {

                            WorkFlowEfficient.iFrame1.dispose();
                        }
                    }


                } else {
                    JOptionPane.showMessageDialog(WorkFlowEfficient.wfes, "Invalid Id or Password");
                }


            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
    KeyListener kl = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getSource() == loginBT && e.getKeyCode() == KeyEvent.VK_ENTER) {
                loginMethod();
            }

        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    };
    ActionListener al = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == loginBT) {
                loginMethod();
            }
        }
    };

    void clear() {
        usernameVal.setText("");
        passwordVal.setText("");

    }

    boolean validation() {
        boolean flag = true;
        clear();


        if (usernameTF.getText().equals("")) {
            usernameVal.setText("Please enter Username");
            flag = false;
        }


        if (passwordTF.getText().equals("")) {
            passwordVal.setText("Please enter Password");
            flag = false;
        }


        return flag;
    }
}
