package wfes;

import dal.ProjectDAL;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import to.Project;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 01
 */
public class ProjectModify extends javax.swing.JPanel {

    /**
     * Creates new form ProjectModify
     */
    List<Project> projectList = null;
    Vector colVector = new Vector();
    public static int selectedRow = 0;

    public ProjectModify() {
        initComponents();

        //td.fillTableData(projectModifyTB, new ConnectionDAL().getConnection(), "project");

         colVector = new ProjectDAL().getProjectColumnDetails();
        refreshtb();

        projectModifyTB.getSelectionModel().addListSelectionListener(l1);
        projectModifyTB.addKeyListener(kl);
        searchTextField.setEnabled(false);
        UpdateBT.addActionListener(al);
        deleteBT.addActionListener(al);
        UpdateBT.addKeyListener(k2);
        deleteBT.addKeyListener(k2);
        //System.out.println("Selected row:"+projectModifyTB.getSelectedRow());



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        UpdateBT = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectModifyTB = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        deleteBT = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        UpdateBT.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        UpdateBT.setForeground(new java.awt.Color(86, 86, 87));
        UpdateBT.setText("UPDATE");

        projectModifyTB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        projectModifyTB.setForeground(new java.awt.Color(86, 86, 87));
        projectModifyTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(projectModifyTB);

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(86, 86, 87));
        jLabel1.setText("PROJECT MODIFY");

        searchTextField.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        searchTextField.setForeground(new java.awt.Color(86, 86, 87));

        deleteBT.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        deleteBT.setForeground(new java.awt.Color(86, 86, 87));
        deleteBT.setText("DELETE");

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(86, 86, 87));
        jLabel2.setText("Search:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(12, 12, 12)))
                        .addGap(18, 18, 18)
                        .addComponent(UpdateBT, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBT)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateBT)
                    .addComponent(deleteBT)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UpdateBT;
    private javax.swing.JButton deleteBT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable projectModifyTB;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

    public void deleteButtonMethod(){
        
                Project projectTempFinal = null;
                List<Project> projectList = new ProjectDAL().getProjectDetails();

                for (Project projectTemp : projectList) {
                    int x = ProjectModify.returnSelectedRow();
                    System.out.println("Returned value" + x);
                    if (projectTemp.getProjId().toString().equals(x + "")) {
                        projectTempFinal = projectTemp;
                    }
                }
                new ProjectDAL().deleteProjectDetails(projectTempFinal);



                refreshtb();
    }
    void refreshtb() {
        projectList = new ProjectDAL().getProjectDetails();
       

        Vector rowVector = new Vector();
        for (Project projectTemp : projectList) {
            Vector temp = new Vector();
            temp.add(projectTemp.getProjId());
            temp.add(projectTemp.getTitle());
            temp.add(projectTemp.getDescription());
            temp.add(projectTemp.getClient());
            rowVector.add(temp);
        }





        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        projectModifyTB.setModel(model);
            projectModifyTB.setAutoCreateRowSorter(true);
        
         //projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(0));


       // projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(17));
       // projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(16));
//        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(15));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(14));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(13));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(12));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(11));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(10));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(9));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(8));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(7));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(6));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(5));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(4));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(0));

       //  colVector.removeAllElements();
    }
    ActionListener al = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == UpdateBT) {

                new popup.popup().displayProjectUpdate();
                 refreshtb();
            }

            if (e.getSource() == deleteBT) {
                deleteButtonMethod();
            }



        }
    };
    KeyListener k2 = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getSource() == UpdateBT) {

                new popup.popup().displayProjectUpdate();
                 refreshtb();
            }

            if (e.getSource() == deleteBT) {
                deleteButtonMethod();
            }
            
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    };
    ListSelectionListener l1 = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {

            if (projectModifyTB.getSelectedRow() > -1) {
                int row = projectModifyTB.convertRowIndexToModel(projectModifyTB.getSelectedRow());


                int col = projectModifyTB.convertColumnIndexToModel(projectModifyTB.getSelectedColumn());

                Object obj = projectModifyTB.getModel().getValueAt(row, 0);

                String x = obj.toString();

                selectedRow = Integer.parseInt(x);
            }

        }
    };

    public static int returnSelectedRow() {
        return selectedRow;
    }
    KeyListener kl = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {

                String data = searchTextField.getText();
                if (data.length() > 0) {
                    data = data.substring(0, data.length() - 1);
                    searchTextField.setText(data);
                }
            } else {
                if ((e.getKeyCode() >= 'a' && e.getKeyCode() <= 'z') || (e.getKeyCode() >= 'A' && e.getKeyCode() <= 'Z') || (e.getKeyCode() >= '0' && e.getKeyCode() <= '9') || e.getKeyCode() == ' ') {
                    searchTextField.setText(searchTextField.getText() + e.getKeyChar());
                    searchTextField.setText(searchTextField.getText().toLowerCase());
                } else {
                    //System.out.println("hello");
                }
            }
            searchProjectList();

        }

        @Override
        public void keyReleased(KeyEvent ke) {
        }
    };

    public void searchProjectList() {
        String data = searchTextField.getText();
        List<Project> projectListTemp = new ArrayList<Project>();
        for (Project projectTemp : projectList) {
            if (projectTemp.getTitle().toLowerCase().contains(data) || projectTemp.getDescription().toLowerCase().contains(data) || projectTemp.getClient().toLowerCase().contains(data)) {
                projectListTemp.add(projectTemp);

            }
        }
        Vector rowVector = new Vector();
        for (Project projectTemp : projectListTemp) {
            Vector temp = new Vector();
            temp.add(projectTemp.getProjId());
            temp.add(projectTemp.getTitle());
            temp.add(projectTemp.getDescription());
            temp.add(projectTemp.getClient());
            rowVector.add(temp);
        }
        





        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        projectModifyTB.setModel(model);

      //  projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(0));
       // projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(17));
      //  projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(16));
       // projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(15));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(14));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(13));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(12));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(11));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(10));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(9));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(8));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(7));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(6));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(5));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(4));
        projectModifyTB.removeColumn(projectModifyTB.getColumnModel().getColumn(0));


    }
}
