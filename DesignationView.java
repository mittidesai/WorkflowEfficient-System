/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wfes;

import Conversion.TableData;
import dal.ConnectionDAL;
import dal.DepartmentDAL;
import dal.DesignationDAL;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import to.Department;
import to.Designation;

/**
 *
 * @author 02
 */
public class DesignationView extends javax.swing.JPanel {

    /**
     * Creates new form DesignationView
     */
    
    List<Designation> designationList = null;
    Vector colVector = new Vector();
    
    
    public DesignationView() {
        initComponents();
       // td.fillTableData(designationViewTB, new ConnectionDAL().getConnection(),"designation");
        
        
        refreshtb();
     
    
        
        
        designationViewTB.getSelectionModel().addListSelectionListener(l1);
        designationViewTB.addKeyListener(kl);
        searchTextField.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        designationViewTB = new javax.swing.JTable();
        searchTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        designationViewTB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        designationViewTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(designationViewTB);

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(86, 86, 87));
        jLabel1.setText("Designation View");

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(86, 86, 87));
        jLabel2.setText("Search:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(196, 196, 196))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(60, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable designationViewTB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

     void refreshtb(){
          designationList = new DesignationDAL().getDesignationDetails();
    colVector = new DepartmentDAL().getDepartmentColumnDetails();
    
     Vector rowVector = new Vector();
        for (Designation designationTemp : designationList) {
            Vector temp = new Vector();
            temp.add(designationTemp.getDsgnId());
            temp.add(designationTemp.getDsgnTitle());
            temp.add(designationTemp.getDsgnDesc());
            rowVector.add(temp);
        }
        TableModel model = new DefaultTableModel(rowVector,colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        designationViewTB.setModel(model);
            designationViewTB.setAutoCreateRowSorter(true);
    
         
         designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(7));
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(6));
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(5));
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(4));
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(3));
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(0));
        
    }
    
    
    
    
    
    
    
    ListSelectionListener l1 = new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if(designationViewTB.getSelectedRow()> -1)
            {
            int k = designationViewTB.convertRowIndexToModel(designationViewTB.getSelectedRow());
            
            }

        }
    };
KeyListener kl=new KeyListener() {

        @Override
        public void keyTyped(KeyEvent e) {
           
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {

                String data = searchTextField.getText();
                if (data.length() > 0) {
                    data = data.substring(0, data.length() - 1);
                    searchTextField.setText(data);
                }
            }
            else{  
                if((e.getKeyCode()>= 'a' && e.getKeyCode()<='z') ||(e.getKeyCode()>= 'A' && e.getKeyCode()<='Z') || (e.getKeyCode()>= '0' && e.getKeyCode()<='9') || e.getKeyCode()==' '){
                searchTextField.setText(searchTextField.getText() + e.getKeyChar());
                searchTextField.setText(searchTextField.getText().toLowerCase());
                }
                else{
                    //System.out.println("hello");
                }
            }
            searchDesignationList();
            
        }

        @Override
        public void keyReleased(KeyEvent ke) {
            
        }
    };


public void searchDesignationList() {
        String data = searchTextField.getText();
        List<Designation> designationListTemp = new ArrayList<Designation>();
        for (Designation designationTemp : designationList) {
           if (designationTemp.getDsgnTitle().toLowerCase().contains(data) || designationTemp.getDsgnDesc().toLowerCase().contains(data)){
                designationListTemp.add(designationTemp);
            }
        }
        Vector rowVector = new Vector();
        for (Designation designationTemp : designationListTemp) {
            Vector temp = new Vector();
            temp.add(designationTemp.getDsgnId());
            temp.add(designationTemp.getDsgnTitle());
            temp.add(designationTemp.getDsgnDesc());
            rowVector.add(temp);
        }
        TableModel model = new DefaultTableModel(rowVector,colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        designationViewTB.setModel(model);
        
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(7));
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(6));
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(5));
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(4));
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(3));
        designationViewTB.removeColumn(designationViewTB.getColumnModel().getColumn(0));
        

    }

}

