/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wfes;

import dal.ConnectionDAL;
import dal.TaskDAL;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import to.Task;

/**
 *
 * @author hp pav 15-e015tx
 */
public class TaskModify extends javax.swing.JPanel {

    List<Task> taskList = null;
    Vector colVector = new Vector();
    Vector colVector1 = new Vector();
    Connection connection = new ConnectionDAL().getConnection();
    public static int selectedRow = 0;

    /**
     * Creates new form TaskModify
     */
    public TaskModify() {
        initComponents();
        initComponents();

        colVector.add("Task_ID");
        colVector.add("TITLE");
        colVector.add("DESCRIPTION");
        colVector.add("PROJECT");

        refreshtb();
        taskList = new TaskDAL().getTaskDetails();

        TaskModifyTB.getSelectionModel().addListSelectionListener(l1);
        TaskModifyTB.addKeyListener(kl);
        searchTextField.setEnabled(false);
        UpdateBT.addActionListener(al);
        deleteBT.addActionListener(al);
        UpdateBT.addKeyListener(k2);
        deleteBT.addKeyListener(k2);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        UpdateBT = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TaskModifyTB = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        deleteBT = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        UpdateBT.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        UpdateBT.setForeground(new java.awt.Color(86, 86, 87));
        UpdateBT.setText("UPDATE");

        TaskModifyTB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        TaskModifyTB.setForeground(new java.awt.Color(86, 86, 87));
        TaskModifyTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TaskModifyTB);

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(86, 86, 87));
        jLabel1.setText("Task Modify");

        searchTextField.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        searchTextField.setForeground(new java.awt.Color(86, 86, 87));

        deleteBT.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        deleteBT.setForeground(new java.awt.Color(86, 86, 87));
        deleteBT.setText("DELETE");

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(86, 86, 87));
        jLabel2.setText("Search:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(UpdateBT, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(deleteBT)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(260, 260, 260))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateBT)
                    .addComponent(deleteBT)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TaskModifyTB;
    private javax.swing.JButton UpdateBT;
    private javax.swing.JButton deleteBT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

    public void deleteButtonMethod(){
          Task taskTempFinal = null;
                List<Task> taskList = new TaskDAL().getTaskDetails();

                for (Task taskTemp : taskList) {
                    int x = TaskModify.returnSelectedRow();

                    if (taskTemp.getTaskId().toString().equals(x + "")) {
                        taskTempFinal = taskTemp;
                    }
                }
                new TaskDAL().deleteTaskDetails(taskTempFinal);



                refreshtb();
    }
    void refreshtb() {
        taskList = new TaskDAL().getTaskDetails();


        Vector rowVector = new Vector();
        for (Task taskTemp : taskList) {
            if (taskTemp.getProjId().getStatus() != 2) {
                //
                Vector temp = new Vector();
                temp.add(taskTemp.getTaskId());
                temp.add(taskTemp.getTitle());
                temp.add(taskTemp.getDescription());
                temp.add(taskTemp.getProjId().getTitle());

                rowVector.add(temp);
            }

        }
        Statement st = null;







        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        TaskModifyTB.setModel(model);
        TaskModifyTB.setAutoCreateRowSorter(true);






        TaskModifyTB.removeColumn(TaskModifyTB.getColumnModel().getColumn(0));
        // colVector.removeAllElements();



    }
    ActionListener al = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == UpdateBT) {

                new popup.popup().displayTaskUpdate();
                refreshtb();
            }

            if (e.getSource() == deleteBT) {
                deleteButtonMethod();
              
            }



        }
    };
    KeyListener k2 = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getSource() == UpdateBT) {

                new popup.popup().displayTaskUpdate();
                refreshtb();
            }

            if (e.getSource() == deleteBT) {
                deleteButtonMethod();
              
            }
            
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    };
    ListSelectionListener l1 = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {

            if (TaskModifyTB.getSelectedRow() > -1) {
                int row = TaskModifyTB.convertRowIndexToModel(TaskModifyTB.getSelectedRow());


                int col = TaskModifyTB.convertColumnIndexToModel(TaskModifyTB.getSelectedColumn());

                Object obj = TaskModifyTB.getModel().getValueAt(row, 0);

                String x = obj.toString();

                selectedRow = Integer.parseInt(x);
            }

        }
    };

    public static int returnSelectedRow() {
        return selectedRow;
    }
    KeyListener kl = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {

                String data = searchTextField.getText();
                if (data.length() > 0) {
                    data = data.substring(0, data.length() - 1);
                    searchTextField.setText(data);
                }
            } else {
                if ((e.getKeyCode() >= 'a' && e.getKeyCode() <= 'z') || (e.getKeyCode() >= 'A' && e.getKeyCode() <= 'Z') || (e.getKeyCode() >= '0' && e.getKeyCode() <= '9') || e.getKeyCode() == ' ') {
                    searchTextField.setText(searchTextField.getText() + e.getKeyChar());
                    searchTextField.setText(searchTextField.getText().toLowerCase());
                } else {
                    //System.out.println("hello");
                }
            }
            searchTaskList();

        }

        @Override
        public void keyReleased(KeyEvent ke) {
        }
    };

    public void searchTaskList() {
        String data = searchTextField.getText();
        List<Task> taskListTemp = new ArrayList<Task>();
        for (Task taskTemp : taskList) {
            if (taskTemp.getTitle().toLowerCase().contains(data) || taskTemp.getDescription().toLowerCase().contains(data) || taskTemp.getProjId().getTitle().toLowerCase().contains(data)) {
                taskListTemp.add(taskTemp);
            }
        }

        Vector rowVector = new Vector();
        for (Task taskTemp : taskListTemp) {
            if (taskTemp.getProjId().getStatus() != 2) {

                Vector temp = new Vector();
                temp.add(taskTemp.getTaskId());
                temp.add(taskTemp.getTitle());
                temp.add(taskTemp.getDescription());
                temp.add(taskTemp.getProjId().getTitle());

                rowVector.add(temp);
            }

        }

        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        TaskModifyTB.setModel(model);



        TaskModifyTB.removeColumn(TaskModifyTB.getColumnModel().getColumn(0));

    }
}
