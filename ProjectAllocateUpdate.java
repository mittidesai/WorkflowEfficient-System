/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wfes;

import Conversion.ProjectCompletion;
import dal.EmployeeDAL;
import dal.PlTlDal;
import dal.ProjEmpDal;
import dal.ProjectDAL;
import email.EmailClass;
import email.EmailDetails;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.List;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import to.Department;
import to.Designation;
import to.Employee;
import to.PlTl;
import to.ProjEmp;
import to.Project;

/**
 *
 * @author hp pav 15-e015tx
 */
public class ProjectAllocateUpdate extends javax.swing.JPanel {

    /**
     * Creates new form ProjectAllocateUpdate
     */
    ProjEmp projEmp = null;
    public static ProjEmp projEmpini = null;

    public ProjectAllocateUpdate() {
        initComponents();
        clear();

        fillComboDataProject(projCB);
        fillComboDataEmployee(projmanCB);
        projmanCB.addItemListener(il);
        allocateBT.addActionListener(al);
    }

    public ProjectAllocateUpdate(ProjEmp projEmp) {
        initComponents();
        clear();


        this.projEmp = projEmp;

        fillComboDataProject(projCB);
        fillComboDataEmployee(projmanCB);

        int itemCountProj = projCB.getItemCount();
        for (int i = 1; i < itemCountProj; i++) {
            if (projCB.getItemAt(i).toString().equals(projEmp.getProjId() + "")) {
                projCB.setSelectedIndex(i);
            }
        }
        projCB.setEnabled(false);

        int itemCountProjman = projmanCB.getItemCount();
        for (int i = 1; i < itemCountProjman; i++) {
            //System.out.println("projemp sent:::"+projEmp.getEmpId().getEmpId());
            if (((Employee) projmanCB.getItemAt(i)).getEmpId().toString().equals(projEmp.getEmpId().getEmpId() + "")) {
                projmanCB.setSelectedIndex(i);
            }
        }

        projEmpini = projEmp;
        emailMSG.setText("");

        projmanCB.addItemListener(il);
        allocateBT.addActionListener(al);
        allocateBT.addKeyListener(k2);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        captionLB = new javax.swing.JLabel();
        allocateBT = new javax.swing.JButton();
        emailMSG = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        projmanCB = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        projCB = new javax.swing.JComboBox();
        projmanVal = new javax.swing.JLabel();
        projVal = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        sd2LB = new javax.swing.JLabel();
        title3LB = new javax.swing.JLabel();
        sdLB = new javax.swing.JLabel();
        projmannameLB = new javax.swing.JLabel();
        ed3LB = new javax.swing.JLabel();
        ed1LB = new javax.swing.JLabel();
        title2LB = new javax.swing.JLabel();
        titleLB = new javax.swing.JLabel();
        edLB = new javax.swing.JLabel();
        sd1LB = new javax.swing.JLabel();
        ed2LB = new javax.swing.JLabel();
        sd3LB = new javax.swing.JLabel();
        title1LB = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 24)); // NOI18N
        jLabel1.setText("Allocate Project");

        captionLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        captionLB.setText("jLabel5");

        allocateBT.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        allocateBT.setText("Allocate");

        emailMSG.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        emailMSG.setText("jLabel4");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        projmanCB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        projmanCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jLabel2.setText("Project To Be Allocated:");

        projCB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        projCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        projmanVal.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        projmanVal.setForeground(new java.awt.Color(255, 0, 0));
        projmanVal.setText("jLabel7");

        projVal.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        projVal.setForeground(new java.awt.Color(255, 0, 0));
        projVal.setText("jLabel6");

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        jLabel3.setText("Project Managers:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(65, 65, 65)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(projCB, 0, 268, Short.MAX_VALUE)
                    .addComponent(projmanCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projVal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(projmanVal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(projCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projVal))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(projmanCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projmanVal))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        sd2LB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        sd2LB.setText("jLabel13");

        title3LB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        title3LB.setText("jLabel11");

        sdLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        sdLB.setText("Start Date");

        projmannameLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        projmannameLB.setText("jLabel4");

        ed3LB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        ed3LB.setText("jLabel19");

        ed1LB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        ed1LB.setText("jLabel17");

        title2LB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        title2LB.setText("jLabel10");

        titleLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        titleLB.setText("Title");

        edLB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        edLB.setText("End Date");

        sd1LB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        sd1LB.setText("jLabel14");

        ed2LB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        ed2LB.setText("jLabel18");

        sd3LB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        sd3LB.setText("jLabel15");

        title1LB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        title1LB.setText("jLabel9");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projmannameLB, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(titleLB, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(title1LB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(title2LB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(title3LB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sdLB)
                    .addComponent(sd1LB, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(sd2LB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sd3LB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(edLB)
                    .addComponent(ed1LB, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(ed2LB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ed3LB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLB)
                    .addComponent(sdLB)
                    .addComponent(edLB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title1LB)
                    .addComponent(sd1LB)
                    .addComponent(ed1LB)
                    .addComponent(projmannameLB))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title2LB)
                    .addComponent(sd2LB)
                    .addComponent(ed2LB))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title3LB)
                    .addComponent(sd3LB)
                    .addComponent(ed3LB))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(138, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(allocateBT)
                        .addGap(81, 81, 81)
                        .addComponent(emailMSG, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(captionLB)
                        .addGap(648, 648, 648))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(122, 122, 122))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(349, 349, 349)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(captionLB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailMSG)
                    .addComponent(allocateBT))
                .addGap(82, 82, 82))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allocateBT;
    private javax.swing.JLabel captionLB;
    private javax.swing.JLabel ed1LB;
    private javax.swing.JLabel ed2LB;
    private javax.swing.JLabel ed3LB;
    private javax.swing.JLabel edLB;
    private javax.swing.JLabel emailMSG;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JComboBox projCB;
    private javax.swing.JLabel projVal;
    private javax.swing.JComboBox projmanCB;
    private javax.swing.JLabel projmanVal;
    private javax.swing.JLabel projmannameLB;
    private javax.swing.JLabel sd1LB;
    private javax.swing.JLabel sd2LB;
    private javax.swing.JLabel sd3LB;
    private javax.swing.JLabel sdLB;
    private javax.swing.JLabel title1LB;
    private javax.swing.JLabel title2LB;
    private javax.swing.JLabel title3LB;
    private javax.swing.JLabel titleLB;
    // End of variables declaration//GEN-END:variables
    
    public void allocateUpdateMethod(){
              for(int k=0;k<emailList.length;k++){
                    emailList[k]=null;
                }
                if (validation()) {
                    int flag = 0;
                    ProjEmp projEmp1 = new ProjEmp();
                    projEmp1.setEmpId((Employee) projmanCB.getSelectedItem());
                    projEmp1.setProjId((Project) projCB.getSelectedItem());
                    projEmp1.setPeId(projEmp.getPeId());


                    List<ProjEmp> projEmpList = new ProjEmpDal().getProjEmpDetails();
                    for (ProjEmp projEmpTemp : projEmpList) {


                        if (projEmpTemp.getEmpId().getEmpId() == projEmp1.getEmpId().getEmpId()) {
                            if (projEmpTemp.getProjId().getProjId() == projEmp1.getProjId().getProjId()) {
                                JOptionPane.showMessageDialog(WorkFlowEfficient.wfes, "Project Already Allocated");
                                flag = 1;
                            }

                        }


                    }

                    if (flag == 0) {

                        new ProjEmpDal().updateProjEmpDetails(projEmpini);
                        new ProjEmpDal().addProjEmpDetails(projEmp1);
                        projemail=projEmp1.getProjId();

                        Window w = SwingUtilities.getWindowAncestor(popup.popup.projectAllocateUpdate);
                        w.setVisible(false);
                        
                         Employee tl = new Employee();
                        Employee je = new Employee();


                       
                        int emlcnt = 0;
                        int i = 0;

                        PlTl plTl = new PlTl();
                        List<PlTl> plTlList = new PlTlDal().getPlTlDetails();
                        for (PlTl plTlTemp : plTlList) {
                            if (plTlTemp.getPlId().getEmpId() == projEmp.getEmpId().getEmpId()) {
                                tl = plTlTemp.getTlId();
                                }
                        }

                        emailList[0] = projEmp1.getEmpId().getEmailId();
                        
                        emailList[1] = tl.getEmailId();
                        



                        SwingWorker worker = new SwingWorker<Void, Void>() {
                            @Override
                            protected Void doInBackground() throws Exception {

                                emailMSG.setText("Kindly wait mail is being sent...");

                                EmailDetails emailDetails = new EmailDetails();
                                emailDetails.setTo(emailList);
                                emailDetails.setFrom("workflowefficientsystem@gmail.com");
                                emailDetails.setSubject("New Project:" + projemail.getTitle());
                                emailDetails.setMessage("You are allocated project :" + projemail.getTitle());
                                new EmailClass().sendEmail(emailDetails);

                                System.out.println("Done");
                                emailMSG.setText("Mail Sent");
                               // emailList = null;
                                return null;
                            }
                        };

                        worker.execute();


                    }
                }
    }
    void fillComboDataProject(JComboBox jComboBox) {
        Vector vector = new Vector();
        vector.add("Please Enter");
        List<Project> projectList = new ProjectDAL().getProjectDetails();
        Project projectTempFinal = null;
        for (Project projectTemp : projectList) {
            if (projectTemp.getStatus() != 2) {
                vector.add(projectTemp);
            }
        }
        ComboBoxModel cbm = new DefaultComboBoxModel(vector);
        jComboBox.setModel(cbm);

    }

    void fillComboDataEmployee(JComboBox jComboBox) {
        Vector vector = new Vector();
        vector.add("Please Enter");
        List<Employee> employeeList = new EmployeeDAL().getEmployeeDetails();


        Employee emplocal = LogIn.localempid;
        Department department = emplocal.getDeptId();
        Designation designation = emplocal.getDsgnId();
        if (designation.getDsgnTitle().equals("DEPUTY GENERAL MANAGER")) {
            System.out.println(designation.getDsgnId() + " Empid:" + emplocal.getEmpId() + "dept" + emplocal.getDeptId());


            for (Employee employeeTemp : employeeList) {
                //System.out.println(employeeTemp);
                if (employeeTemp.getDsgnId().getDsgnTitle().equals("PROJECT MANAGER")) {
                    if (employeeTemp.getDeptId().getDeptId() == department.getDeptId()) {
                        System.out.println(employeeTemp.getEmpId());
                        vector.add(employeeTemp);
                    }
                }

            }
        }

        ComboBoxModel cbm = new DefaultComboBoxModel(vector);
        jComboBox.setModel(cbm);

    }
    ItemListener il = new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getSource() == projmanCB) {
                if (projmanCB.getSelectedIndex() > 0) {
                    Employee pm = (Employee) projmanCB.getSelectedItem();


                    projmannameLB.setText(pm.getEmpName());
                    titleLB.setText("Title");
                    sdLB.setText("Start Date");
                    edLB.setText("End Date");

                    List<ProjEmp> projEmpList = new ProjEmpDal().getProjEmpDetails();

                    int cnt = 0;
                    Project proj[] = new Project[5];
                    for (ProjEmp projEmpTemp : projEmpList) {

                        if (projEmpTemp.getEmpId().getEmpId().equals(pm.getEmpId())) {
                            if (new ProjectCompletion().getProjCompPercent(projEmpTemp.getProjId()) != 100) {

                                cnt++;
                                proj[cnt] = projEmpTemp.getProjId();

                            }
                        }


                    }
                    if (cnt == 0) {
                        clear();
                        captionLB.setText("No project alloctaed");
                    } else {

                        for (int i = 1; i <= cnt; i++) {

                            if (cnt == 3) {

                                if (i == 1) {
                                    title1LB.setText(proj[i].getTitle());
                                    sd1LB.setText(proj[i].getStartDate().toString());
                                    ed1LB.setText(proj[i].getEndDate().toString());


                                }
                                if (i == 2) {
                                    title2LB.setText(proj[i].getTitle());
                                    sd2LB.setText(proj[i].getStartDate().toString());
                                    ed2LB.setText(proj[i].getEndDate().toString());


                                }
                                if (i == 3) {
                                    title3LB.setText(proj[i].getTitle());
                                    sd3LB.setText(proj[i].getStartDate().toString());
                                    ed3LB.setText(proj[i].getEndDate().toString());


                                }
                                captionLB.setText("");
                            } else if (cnt == 2) {

                                if (i == 1) {
                                    title1LB.setText(proj[i].getTitle());
                                    sd1LB.setText(proj[i].getStartDate().toString());
                                    ed1LB.setText(proj[i].getEndDate().toString());


                                }
                                if (i == 2) {
                                    title2LB.setText(proj[i].getTitle());
                                    sd2LB.setText(proj[i].getStartDate().toString());
                                    ed2LB.setText(proj[i].getEndDate().toString());


                                }

                                title3LB.setText("");
                                sd3LB.setText("");
                                ed3LB.setText("");
                                captionLB.setText("");



                            } else if (cnt == 1) {

                                if (i == 1) {
                                    title1LB.setText(proj[i].getTitle());
                                    sd1LB.setText(proj[i].getStartDate().toString());
                                    ed1LB.setText(proj[i].getEndDate().toString());


                                }

                                title2LB.setText("");
                                sd2LB.setText("");
                                ed2LB.setText("");



                                title3LB.setText("");
                                sd3LB.setText("");
                                ed3LB.setText("");
                                captionLB.setText("");



                            }

                        }
                    }


                }
            }
        }
    };
     public static String emailList[] = new String[50];
    public static  Project projemail=new Project();
    ActionListener al = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == allocateBT) {
           allocateUpdateMethod();
            }
        }
    };
    KeyListener k2 = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
             if (e.getSource() == allocateBT) {
           allocateUpdateMethod();
            }
            
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    };

    void clear() {
        projmanVal.setText("");
        projVal.setText("");
        title1LB.setText("");
        title2LB.setText("");
        title3LB.setText("");
        sd1LB.setText("");
        sd2LB.setText("");
        sd3LB.setText("");
        ed1LB.setText("");
        ed2LB.setText("");
        ed3LB.setText("");
        projmannameLB.setText("");
        titleLB.setText("");
        sdLB.setText("");
        edLB.setText("");
        captionLB.setText("");
    }

    boolean validation() {
        boolean flag = true;
        if (!title3LB.getText().equals("")) {
            JOptionPane.showMessageDialog(WorkFlowEfficient.wfes, "Sorry project allocation reached threshold");
            flag = false;
        }
        clear();
        if (projCB.getSelectedIndex() == 0) {
            projVal.setText("Please select Project");
            flag = false;
        }

        if (projmanCB.getSelectedIndex() == 0) {
            projmanVal.setText("Please select Project Manager");
            flag = false;
        }



        return flag;
    }
}
