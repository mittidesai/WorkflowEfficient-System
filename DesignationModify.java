/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wfes;

import Conversion.TableData;
import dal.ConnectionDAL;
import dal.DepartmentDAL;
import dal.DesignationDAL;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import to.Department;
import to.Designation;

/**
 *
 * @author 02
 */
public class DesignationModify extends javax.swing.JPanel {

    /**
     * Creates new form DesignationModify
     */
    List<Designation> designationList = null;
    static int selectedRow = 0;
    Vector colVector = new Vector();
    
    public DesignationModify() {
        initComponents();
        //td.fillTableData(designationModifyTB, new ConnectionDAL().getConnection(),"designation");
        
        refreshtb();
        
        designationModifyTB.getSelectionModel().addListSelectionListener(l1);
        designationModifyTB.addKeyListener(kl);
        UpdateBT.addActionListener(al);
        UpdateBT.addKeyListener(k2);
       // deleteBT.addActionListener(al);
        searchTextField.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        designationModifyTB = new javax.swing.JTable();
        searchTextField = new javax.swing.JTextField();
        UpdateBT = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        designationModifyTB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        designationModifyTB.setForeground(new java.awt.Color(86, 86, 87));
        designationModifyTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(designationModifyTB);

        UpdateBT.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        UpdateBT.setForeground(new java.awt.Color(86, 86, 87));
        UpdateBT.setText("UPDATE");

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(86, 86, 87));
        jLabel1.setText("Designation Modify");

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(86, 86, 87));
        jLabel2.setText("Search:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addComponent(jLabel1)))
                        .addGap(18, 18, 18)
                        .addComponent(UpdateBT)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateBT)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UpdateBT;
    private javax.swing.JTable designationModifyTB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
    void refreshtb() {
        
        designationList = new DesignationDAL().getDesignationDetails();
        colVector = new DepartmentDAL().getDepartmentColumnDetails();
        
        Vector rowVector = new Vector();
        for (Designation designationTemp : designationList) {
            Vector temp = new Vector();
            temp.add(designationTemp.getDsgnId());
            temp.add(designationTemp.getDsgnTitle());
            temp.add(designationTemp.getDsgnDesc());
            rowVector.add(temp);
        }
        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        designationModifyTB.setModel(model);
         designationModifyTB.setAutoCreateRowSorter(true);
        
        
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(7));
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(6));
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(5));
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(4));
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(3));
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(0));
        
    }
    ActionListener al = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == UpdateBT) {
                
                new popup.popup().displayDesignationUpdate();
                refreshtb();
            }
            
        }
    };
    KeyListener k2 = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getSource() == UpdateBT) {
                
                new popup.popup().displayDesignationUpdate();
                refreshtb();
            }
            
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    };
    ListSelectionListener l1 = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (designationModifyTB.getSelectedRow() > -1) {
                int row = designationModifyTB.convertRowIndexToModel(designationModifyTB.getSelectedRow());
                
                
                int col = designationModifyTB.convertColumnIndexToModel(designationModifyTB.getSelectedColumn());
                
                Object obj = designationModifyTB.getModel().getValueAt(row, 0);
                
                String x = obj.toString();
                
                selectedRow = Integer.parseInt(x);
            }
            
        }
    };
    
    public static int returnSelectedRow() {
        return selectedRow;
    }
    KeyListener kl = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
            
        }
        
        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                
                String data = searchTextField.getText();
                if (data.length() > 0) {
                    data = data.substring(0, data.length() - 1);
                    searchTextField.setText(data);
                }
            } else {                
                if ((e.getKeyCode() >= 'a' && e.getKeyCode() <= 'z') || (e.getKeyCode() >= 'A' && e.getKeyCode() <= 'Z') || (e.getKeyCode() >= '0' && e.getKeyCode() <= '9') || e.getKeyCode() == ' ') {
                    searchTextField.setText(searchTextField.getText() + e.getKeyChar());
                    searchTextField.setText(searchTextField.getText().toLowerCase());
                } else {
                    //System.out.println("hello");
                }
            }
            searchDesignationList();
            
        }
        
        @Override
        public void keyReleased(KeyEvent ke) {
            
        }
    };
    
    public void searchDesignationList() {
        String data = searchTextField.getText();
        List<Designation> designationListTemp = new ArrayList<Designation>();
        for (Designation designationTemp : designationList) {
            if (designationTemp.getDsgnTitle().toLowerCase().contains(data) || designationTemp.getDsgnDesc().toLowerCase().contains(data)) {
                designationListTemp.add(designationTemp);
            }
        }
        Vector rowVector = new Vector();
        for (Designation designationTemp : designationListTemp) {
            Vector temp = new Vector();
            temp.add(designationTemp.getDsgnId());
            temp.add(designationTemp.getDsgnTitle());
            temp.add(designationTemp.getDsgnDesc());
            rowVector.add(temp);
        }
        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        designationModifyTB.setModel(model);
        
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(7));
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(6));
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(5));
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(4));
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(3));
        designationModifyTB.removeColumn(designationModifyTB.getColumnModel().getColumn(0));
        
        
        
    }
}
