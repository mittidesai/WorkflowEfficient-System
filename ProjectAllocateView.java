/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wfes;

import Conversion.ProjectCompletion;
import dal.ConnectionDAL;
import dal.ProjEmpDal;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import to.ProjEmp;

/**
 *
 * @author hp pav 15-e015tx
 */
public class ProjectAllocateView extends javax.swing.JPanel {

    /**
     * Creates new form ProjectAllocateView
     */
    List<ProjEmp> projEmpList = null;
    static int selectedRow = 0;
    Connection connection = new ConnectionDAL().getConnection();
    Vector colVector = new Vector();

    public ProjectAllocateView() {
        initComponents();
        
         Statement st = null;
        try {
            st = connection.createStatement();
            ResultSet rs = st.executeQuery("select * from projemp where `DELETE_FLAG`=0");
            ResultSetMetaData rmd = rs.getMetaData();
            int j = rmd.getColumnCount();
            String[] type = new String[50];
            System.out.println("" + j);
            for (int i = 1; i <= j; i++) {

                String col = rmd.getColumnName(i);
                if (col.equals("PROJ_ID")) {
                    colVector.add("PROJECT");
                } else if (col.equals("EMP_ID")) {
                    colVector.add("PROJECT MANAGER");
                } else {
                    colVector.add(col);
                }

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }


        refreshtb();

        if (LogIn.localempid.getDsgnId().getDsgnTitle().toString().equals("DEPUTY GENERAL MANAGER")) {
            titleLB.setText("ALLOCATION MODIFY");

        } else {
            titleLB.setText("ALLOCATION VIEW");
            UpdateBT.setVisible(false);
        }

        AllocationModifyTB.getSelectionModel().addListSelectionListener(l1);
        AllocationModifyTB.addKeyListener(kl);
        UpdateBT.addActionListener(al);
        UpdateBT.addKeyListener(k2);


        searchTextField.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        UpdateBT = new javax.swing.JButton();
        titleLB = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        AllocationModifyTB = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        UpdateBT.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        UpdateBT.setForeground(new java.awt.Color(86, 86, 87));
        UpdateBT.setText("UPDATE");

        titleLB.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 24)); // NOI18N
        titleLB.setForeground(new java.awt.Color(86, 86, 87));
        titleLB.setText("Allocation Modify");

        searchTextField.setEnabled(false);

        AllocationModifyTB.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 12)); // NOI18N
        AllocationModifyTB.setForeground(new java.awt.Color(86, 86, 87));
        AllocationModifyTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(AllocationModifyTB);

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(86, 86, 87));
        jLabel2.setText("Search:");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(titleLB)
                        .add(280, 280, 280))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(searchTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 467, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(UpdateBT))
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 702, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(51, 51, 51))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(titleLB)
                .add(26, 26, 26)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UpdateBT)
                    .add(searchTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 23, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 337, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(43, 43, 43))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AllocationModifyTB;
    private javax.swing.JButton UpdateBT;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel titleLB;
    // End of variables declaration//GEN-END:variables

    void refreshtb() {
        projEmpList = new ProjEmpDal().getProjEmpDetails();
        //colVector = new ProjEmpDal().getProjEmpColumnDetails();



        Vector rowVector = new Vector();
        for (ProjEmp projEmpTemp : projEmpList) {
            if (projEmpTemp.getEmpId().getDsgnId().getDsgnId() == 4) {
                if (projEmpTemp.getEmpId().getDeptId().getDeptId() == LogIn.localempid.getDeptId().getDeptId()) {
                    if (new ProjectCompletion().getProjCompPercent(projEmpTemp.getProjId()) != 100) {

                        Vector temp = new Vector();
                        temp.add(projEmpTemp.getPeId());
                        temp.add(projEmpTemp.getProjId().getTitle());
                        temp.add(projEmpTemp.getEmpId().getEmpName());
                        temp.add(projEmpTemp.getDeleteFlag());
                        temp.add(projEmpTemp.getCreDt());
                        temp.add(projEmpTemp.getModDt());
                        temp.add(projEmpTemp.getCreEmpId());
                        temp.add(projEmpTemp.getModEmpId());



                        rowVector.add(temp);
                    }
                }
            }
        }

       
        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        AllocationModifyTB.setModel(model);
        AllocationModifyTB.setAutoCreateRowSorter(true);


        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(7));
        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(6));
        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(5));
        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(4));
        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(3));
        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(0));

       //colVector.removeAllElements();
    }
    ActionListener al = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == UpdateBT) {

                new popup.popup().displayProjectAllocateUpdate();
                refreshtb();
            }


        }
    };
    KeyListener k2 = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getSource() == UpdateBT) {

                new popup.popup().displayProjectAllocateUpdate();
                refreshtb();
            }
            
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    };
    ListSelectionListener l1 = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (AllocationModifyTB.getSelectedRow() > -1) {
                int row = AllocationModifyTB.convertRowIndexToModel(AllocationModifyTB.getSelectedRow());


                int col = AllocationModifyTB.convertColumnIndexToModel(AllocationModifyTB.getSelectedColumn());

                Object obj = AllocationModifyTB.getModel().getValueAt(row, 0);

                System.out.println("in value changed" + obj);
                String x = obj.toString();


                selectedRow = Integer.parseInt(x);
            }

        }
    };

    public static int returnSelectedRow() {
        return selectedRow;
    }
    KeyListener kl = new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {

                String data = searchTextField.getText();
                if (data.length() > 0) {
                    data = data.substring(0, data.length() - 1);
                    searchTextField.setText(data);
                }
            } else {
                if ((e.getKeyCode() >= 'a' && e.getKeyCode() <= 'z') || (e.getKeyCode() >= 'A' && e.getKeyCode() <= 'Z') || (e.getKeyCode() >= '0' && e.getKeyCode() <= '9') || e.getKeyCode() == ' ') {
                    searchTextField.setText(searchTextField.getText() + e.getKeyChar());
                    searchTextField.setText(searchTextField.getText().toLowerCase());
                } else {
                    //System.out.println("hello");
                }
            }
            searchProjEmpList();

        }

        @Override
        public void keyReleased(KeyEvent ke) {
        }
    };

    public void searchProjEmpList() {
        String data = searchTextField.getText();
        List<ProjEmp> projEmpListTemp = new ArrayList<ProjEmp>();
        for (ProjEmp projEmpTemp : projEmpList) {
            if (projEmpTemp.getEmpId().getEmpName().toLowerCase().contains(data) || projEmpTemp.getProjId().getTitle().toLowerCase().contains(data)) {
                projEmpListTemp.add(projEmpTemp);
            }
        }
        Vector rowVector = new Vector();
        for (ProjEmp projEmpTemp : projEmpListTemp) {
            if (projEmpTemp.getEmpId().getDsgnId().getDsgnId() == 4) {
                if (projEmpTemp.getEmpId().getDeptId().getDeptId() == LogIn.localempid.getDeptId().getDeptId()) {
                    if (new ProjectCompletion().getProjCompPercent(projEmpTemp.getProjId()) != 100) {

                        Vector temp = new Vector();
                        temp.add(projEmpTemp.getPeId());
                        temp.add(projEmpTemp.getProjId().getTitle());
                        temp.add(projEmpTemp.getEmpId().getEmpName());
                        temp.add(projEmpTemp.getDeleteFlag());
                        temp.add(projEmpTemp.getCreDt());
                        temp.add(projEmpTemp.getModDt());
                        temp.add(projEmpTemp.getCreEmpId());
                        temp.add(projEmpTemp.getModEmpId());



                        rowVector.add(temp);
                    }
                }
            }
        }
        TableModel model = new DefaultTableModel(rowVector, colVector) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        AllocationModifyTB.setModel(model);

        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(7));
        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(6));
        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(5));
        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(4));
        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(3));
        AllocationModifyTB.removeColumn(AllocationModifyTB.getColumnModel().getColumn(0));

    }
}
